list.files(path = file_locations, pattern = "NAMP", full.names = TRUE)
NAMP_files <- list.files(path = file_locations, pattern = "NAMP", full.names = TRUE)
NAMP_files
NAMP_files[grepl("NAMP data", NAMP_files   ) | grepl("NAMP Data", NAMP_files   )]
NAMP_files_filter1 <- NAMP_files[grepl("NAMP data", NAMP_files   ) | grepl("NAMP Data", NAMP_files   )]
NAMP_files_filter1[!grepl("titles", NAMP_files_filter1   ) ]
file_list <- NAMP_files_filter1[!grepl("titles", NAMP_files_filter1   ) ]
library(readxl)
# Get the sheets from each excel sheet ------------------------------------
excel_list <- map(file_list, read_excel)
excel_list
# Get the sheets from each excel sheet ------------------------------------
excel_list <- map(file_list, excel_sheets)
excel_list
# Get the sheets from each excel sheet ------------------------------------
excel_list <- map(file_list, excel_sheets) %>%
setNames(file_list)
excel_list
excel_list
excel_list
# Get the sheets from each excel sheet ------------------------------------
excel_list <- map(file_list, read_excel) %>%
setNames(file_list)
excel_sheets <- map(file_list, excel_sheets) %>%
setNames(file_list)
excel_list
excel_list[[1]]
excel_sheets
# Get the sheets from each excel sheet ------------------------------------
excel_sheets <- map(file_list, excel_sheets) %>%
setNames(file_list)
# Get the sheets from each excel sheet ------------------------------------
excel_sheets <- map(file_list, excel_sheets) %>%
setNames(file_list)
# Get the sheets from each excel sheet ------------------------------------
excel_sheets <- NA
excel_sheets <- map(file_list, excel_sheets) %>%
setNames(file_list)
# Get the sheets from each excel sheet ------------------------------------
excel_sheets <- list()
excel_sheets <- map(file_list, excel_sheets) %>%
setNames(file_list)
excel_sheets
# Get the sheets from each excel sheet ------------------------------------
excel_sheets <- map(file_list, excel_sheets) %>%
setNames(file_list)
excel_sheets
# Get the sheets from each excel sheet ------------------------------------
excel_sheet <- map(file_list, excel_sheets) %>%
setNames(file_list)
excel_sheets
setwd("~/Box Sync/UVA-NASTAD Data Folder")
library(tidyverse)
library(readxl)
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
dirs <- list.dirs(path = ".", full.name = TRUE )
complete_data_set_dirs <- dirs[grepl("complete data set", dirs)
#  | grepl("FINAL DOCUMENTS", dirs)
]
file_locations <- complete_data_set_dirs[!grepl("Versions", complete_data_set_dirs) & !grepl("versions", complete_data_set_dirs) ]
NAMP_files <- list.files(path = file_locations, pattern = "NAMP", full.names = TRUE)
NAMP_files_filter1 <- NAMP_files[grepl("NAMP data", NAMP_files   ) | grepl("NAMP Data", NAMP_files   )]
file_list <- NAMP_files_filter1[!grepl("titles", NAMP_files_filter1   ) ]
library(readxl)
# Get the sheets from each excel sheet ------------------------------------
sheet_list <- map(file_list, excel_sheets) %>%
setNames(file_list)
sheet_list
sheet_list
length(sheet_list)
map(length(sheet_list), data.frame(sheet = sheet_list[[.x]], file = file_list[.x]  ))
map(length(sheet_list), ~data.frame(sheet = sheet_list[[.x]], file = file_list[.x]  ))
map(1:length(sheet_list), ~data.frame(sheet = sheet_list[[.x]], file = file_list[.x]  ))
file_sheets <- map_df(1:length(sheet_list), ~data.frame( file = file_list[.x], sheet = sheet_list[[.x]]  ))
file_sheets
file_sheets <- map(1:length(sheet_list), ~data.frame( file = file_list[.x], sheet = sheet_list[[.x]]  ))
file_sheets
excel_list <- map(file_sheets, function(x) {
map2(x$file, x$sheet, function(y, z){
read_excel(file = y, sheet = z)
})
})
excel_list <- map(file_sheets, function(x) {
map2(list(x$file, x$sheet), function(y, z){
read_excel(file = y, sheet = z)
})
})
excel_list <- map(file_sheets, function(x) {
pmap(list(x$file, x$sheet), function(y, z){
read_excel(file = y, sheet = z)
})
})
read_excel( y, sheet = z)
excel_list <- map(file_sheets, function(x) {
pmap(list(x$file, x$sheet), function(y, z){
read_excel( y, sheet = z)
})
})
excel_list
read_excel( y, sheet = z, nmax = 1, skip = 2)
excel_list <- map(file_sheets, function(x) {
pmap(list(x$file, x$sheet), function(y, z){
read_excel( y, sheet = z, nmax = 1, skip = 2)
})
})
excel_list <- map(file_sheets, function(x) {
pmap(list(x$file, x$sheet), function(y, z){
read_excel( y, sheet = z, n_max = 1, skip = 2)
})
})
excel_list[[1]]
excel_list <- map(file_sheets, function(x) {
pmap(list(x$file, x$sheet), function(y, z){
read_excel( y, sheet = z, skip = 2)
})
})
map2(excel_list, colnames())
map2(excel_list, colnames
map2(excel_list, colnames)
pmap(excel_list, colnames)
excel_list
excel_colnames <- map(excel_list, function(x) map(x) function(y) colnames(y))
excel_colnames <- map(excel_list, function(x) map(x, function(y) colnames(y)))
excel_colnames
excel_list <- map(file_sheets, function(x) {
pmap(list(x$file, x$sheet), function(y, z){
read_excel( y, sheet = z)
})
})
excel_list[[1]][[1]]
excel_list[[1]][[1]][1,]
excel_list[[1]][[1]][,1]
excel_list[[1]][[1]][,1] == "State/Territory"
nrow(excel_list[[1]][[1]][,1])
which(excel_list[[1]][[1]][,1] == "State/Territory")
min(which(excel_list[[1]][[1]][,1] == "State/Territory"))
nrow(excel_list[[1]][[1]][,1])
col_names <- min(which(excel_list[[1]][[1]][,1] == "State/Territory"))
col_names
excel_list[[1]][[1]][   min(which(excel_list[[1]][[1]][,1] == "State/Territory")), 1]
excel_list[[1]][[1]][   min(which(excel_list[[1]][[1]][,1] == "State/Territory")), ]
character(excel_list[[1]][[1]][   min(which(excel_list[[1]][[1]][,1] == "State/Territory")), ])
as_character(excel_list[[1]][[1]][   min(which(excel_list[[1]][[1]][,1] == "State/Territory")), ])
as.character(excel_list[[1]][[1]][   min(which(excel_list[[1]][[1]][,1] == "State/Territory")), ])
excel_colnames <- map(excel_list, function(x) map(x, function(y)    as.character(y[min(which(y[,1] == "State/Territory")), ])  ))
excel_colnames[[1]]
excel_start_rows <- map(excel_list, function(x) map(x, function(y)    min(which(y[,1] == "State/Territory")) )  )
warnings()
excel_start_rows
excel_start_rows <- map(excel_list, function(x) map_dbl(x, function(y)    min(which(y[,1] == "State/Territory")) )  )
excel_start_rows
file_sheets
map(1:length(file_sheets), ~file_sheets[[.x]]$col_start <- excel_start_rows[[.x]])
file_sheets_rows <- map(1:length(file_sheets), ~ file_sheets[[.x]]$col_start <- excel_start_rows[[.x]] )
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]]$col_start = excel_start_rows[[.x]]
)
length(file_sheets)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]]$col_start = excel_start_rows[[.x]]
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]]$col_start <- excel_start_rows[[.x]]
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>% add_column(column_start = excel_start_rows[[.x]] )
)
file_sheets_rows
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>% add_column(column_start = excel_start_rows[[.x]] %>%
filter(!column_start == "Inf" ))
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>% add_column(column_start = excel_start_rows[[.x]] %>%
filter(!column_start == inf ))
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>% add_column(column_start = excel_start_rows[[.x]] %>%
filter(!column_start == Inf )
)
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(column_start = excel_start_rows[[.x]] %>%
mutate(column_start = as.characteR(column_start)) %>%
filter(!column_start == "Inf" )
)
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(column_start = excel_start_rows[[.x]] %>%
mutate(column_start = as.character(column_start)) %>%
filter(!column_start == "Inf" )
)
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(column_start = excel_start_rows[[.x]] %>%
mutate(column_start = as.character(column_start)) %>%
filter(!column_start == "Inf" )
)
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(start_col = excel_start_rows[[.x]] %>%
filter(!start_col == Inf )
)
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(start_col = excel_start_rows[[.x]]
)
)
file_sheets_rows[[1]][[1]]
file_sheets_rows[[1]]
file_sheets_rows[[1]]$start_col
is.numeric(file_sheets_rows[[1]]$start_col)
is.numeric(file_sheets_rows[[1]]$start_col)
library(tidyverse)
setwd("~/Desktop/Box Sync/3 Cavs/Data")
setwd("~/Desktop/Box Sync/3 Cavs/Data")
setwd("~//Box Sync/3 Cavs/Data")
prep_need <- read_csv("./Prep_Uptake/prep_by_state.csv") %>% rename(Prep_Need = Total)
prep_use_2014 <- read.xlsx("./Prep_Uptake/AIDSVu_State_PrEP_2014.xlsx", sheetName = "Data")
prep_use_2015 <- read.xlsx("./Prep_Uptake/AIDSVu_State_PrEP_2015.xlsx", sheetName = "Data")
library(xlsx)
library(r2excel)
library(tidyverse)
library(ggrepel)
setwd("~//Box Sync/3 Cavs/Data")
prep_need <- read_csv("./Prep_Uptake/prep_by_state.csv") %>% rename(Prep_Need = Total)
prep_use_2014 <- read.xlsx("./Prep_Uptake/AIDSVu_State_PrEP_2014.xlsx", sheetName = "Data")
prep_use_2015 <- read.xlsx("./Prep_Uptake/AIDSVu_State_PrEP_2015.xlsx", sheetName = "Data")
prep_use_2016 <- read.xlsx("./Prep_Uptake/AIDSVu_State_PrEP_2016.xlsx", sheetName = "Data")
prep_use_2017 <- read.xlsx("./Prep_Uptake/AIDSVu_State_PrEP_2017.xlsx", sheetName = "Data")
prep_use_2018 <- read.xlsx("./Prep_Uptake/AIDSVu_State_PrEP_2018.xlsx", sheetName = "Data")
expansion <- read_csv("./Prep_Uptake/medicaid_expansion.csv")
state_regions <- read_csv("./location_data/State_Regions.csv")
state_populations <- read_csv("./Prep_Uptake/populations_2010_2018.csv")
state_populations <-
state_populations %>%
separate(State, c(NA, "State"), 1)
prep_uptake_stats <-
prep_use_2018 %>%
select(State.Abbreviation, Prep_Users_2018 = State.PrEP.Users ) %>%
inner_join(prep_use_2017) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017 = State.PrEP.Users) %>%
inner_join(prep_use_2016) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017, Prep_Users_2016 = State.PrEP.Users) %>%
inner_join(prep_use_2015) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017, Prep_Users_2016, Prep_Users_2015 = State.PrEP.Users) %>%
inner_join(prep_use_2014) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017, Prep_Users_2016, Prep_Users_2015, Prep_Users_2014 = State.PrEP.Users) %>%
right_join(state_regions, by = c("State.Abbreviation" = "ST")) %>%
rename(ST = State.Abbreviation) %>%
inner_join(prep_need, by = "State") %>%
left_join(expansion) %>%
mutate_at(vars(matches("Users")), funs(Uptake = (.)/Prep_Need *100)) %>%
rename_at(vars(matches("Uptake")), funs(paste0("Uptake_", substr(., 12,15)))) %>%
mutate(Increase17_18 = Uptake_2018 - Uptake_2017,
Increase16_17 = Uptake_2017 - Uptake_2016,
Increase15_16 = Uptake_2016 - Uptake_2015,
Increase14_15 = Uptake_2015 - Uptake_2014)
prep_uptake_stats_scaled <-
prep_use_2018 %>%
select(State.Abbreviation, Prep_Users_2018 = State.PrEP.Users ) %>%
inner_join(prep_use_2017) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017 = State.PrEP.Users) %>%
inner_join(prep_use_2016) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017, Prep_Users_2016 = State.PrEP.Users) %>%
inner_join(prep_use_2015) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017, Prep_Users_2016, Prep_Users_2015 = State.PrEP.Users) %>%
inner_join(prep_use_2014) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017, Prep_Users_2016, Prep_Users_2015, Prep_Users_2014 = State.PrEP.Users) %>%
right_join(state_regions, by = c("State.Abbreviation" = "ST")) %>%
rename(ST = State.Abbreviation) %>%
inner_join(prep_need, by = "State") %>%
inner_join(state_populations) %>%
mutate(indication_rate_2015 = Prep_Need/`2015`) %>%
mutate_at(vars(`2014`:`2018`),funs("Prep_Need" = round((.)*indication_rate_2015, 0) )) %>%
select(ST, State, Region, Prep_Users_2018:Prep_Users_2014, `2014_Prep_Need`:`2018_Prep_Need`) %>%
gather(Type, Prep_Stat, -c(ST:Region)  ) %>%
mutate(Year =   extract_numeric(Type), Type = gsub("[^a-zA-Z]", "", Type) )%>%
spread(Type, Prep_Stat) %>%
mutate(Uptake = PrepUsers/PrepNeed * 100) %>%
select(-PrepUsers, - PrepNeed) %>%
spread(Year, Uptake) %>%
rename_at(vars(`2014`:`2018`), funs(paste0("Uptake_", .)) )%>%
left_join(expansion) %>%
mutate(Increase17_18 = Uptake_2018 - Uptake_2017,
Increase16_17 = Uptake_2017 - Uptake_2016,
Increase15_16 = Uptake_2016 - Uptake_2015,
Increase14_15 = Uptake_2015 - Uptake_2014)
####################
region_uptake <-
prep_use_2018 %>%
select(State.Abbreviation, Prep_Users_2018 = State.PrEP.Users ) %>%
inner_join(prep_use_2017) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017 = State.PrEP.Users) %>%
inner_join(prep_use_2016) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017, Prep_Users_2016 = State.PrEP.Users) %>%
inner_join(prep_use_2015) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017, Prep_Users_2016, Prep_Users_2015 = State.PrEP.Users) %>%
inner_join(prep_use_2014) %>%
select(State.Abbreviation, Prep_Users_2018, Prep_Users_2017, Prep_Users_2016, Prep_Users_2015, Prep_Users_2014 = State.PrEP.Users) %>%
right_join(state_regions, by = c("State.Abbreviation" = "ST")) %>%
rename(ST = State.Abbreviation) %>%
inner_join(prep_need, by = "State") %>%
inner_join(state_populations) %>%
mutate(indication_rate_2015 = Prep_Need/`2015`) %>%
mutate_at(vars(`2014`:`2018`),funs("Prep_Need" = round((.)*indication_rate_2015, 0) )) %>%
select(ST, State, Region, Prep_Users_2018:Prep_Users_2014, `2014_Prep_Need`:`2018_Prep_Need`) %>%
gather(Type, Prep_Stat, -c(ST:Region)  ) %>%
mutate(Year =   readr::parse_number(Type), Type = gsub("[^a-zA-Z]", "", Type) )%>%
spread(Type, Prep_Stat) %>%
mutate(Uptake = PrepUsers/PrepNeed * 100) %>%
group_by(Region, Year) %>%
summarize(Need = sum(PrepNeed), Use = sum(PrepUsers)) %>%
mutate(Uptake = Use/Need *100) %>%
select(-Use, -Need) %>%
spread(Year, Uptake) %>%
mutate(Net = `2018` - `2014` ) %>% ungroup()
region_uptake
###########################################
# Plots for Dr. McManus
setwd("~/Desktop/Box Sync/3 Cavs/Code/Sam/Uptake_in_PrEP")
###########################################
# Plots for Dr. McManus
setwd("~/Box Sync/3 Cavs/Code/Sam/Uptake_in_PrEP")
prep_uptake_stats_scaled %>% select(-Expansion_2018_1) %>%
write_csv(., path = "uptake_stats.csv", col_names = TRUE, na = "NA" )
uptake_graph_data <-
prep_uptake_stats_scaled %>%
mutate(a2018 = paste0(Expansion_2018,":", Uptake_2018 ),
a2017 = paste0(Expansion_2017,":", Uptake_2017 ),
a2016 = paste0(Expansion_2016,":", Uptake_2016 ),
a2015 = paste0(Expansion_2015,":", Uptake_2015 ),
a2014 = paste0(Expansion_2014,":", Uptake_2014 ) ) %>%
select(ST:Region, a2018:a2014) %>%
gather(Year, Uptake, -c(ST:Region) ) %>%
separate(Uptake, c("Expansion", "Uptake"),sep = ":") %>%
separate(Year, c(NA, "Year"), 1) %>%
mutate(Uptake = as.numeric(Uptake),
Year = as.numeric(Year))
p <- ggplot(uptake_graph_data %>%
group_by(Region, Year) %>%
summarize(Uptake = mean(Uptake)) ,
aes(x = Year,
y = Uptake,
group = Region,
color = Region )) +
geom_line(size = 2) +
geom_point(size = 2) +
geom_text(data = uptake_graph_data %>%
group_by(Region, Year) %>%
summarize(Uptake = mean(Uptake)) %>%
arrange(desc(Year)) %>%
slice(1),
aes(x = Year + .1, label = Region), color = "Black", alpha = 1, hjust = 0, size = 4) +
#  facet_grid(.~Region , scales = "free_y") +
scale_fill_brewer(palette="Set1") +
coord_cartesian(clip = 'off') +
#  theme(panel.spacing = unit(3, "lines")) +
ggtitle("Regional PrEP Uptake") +
labs(y = "") +
ylim(0, NA) +
#  scale_y_continuous(breaks=seq(0,70,5))+
expand_limits( y = 0) +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.margin = unit(
c(t = .1, r = .5,b = .1, l = .1), "in"
),
panel.background = element_blank(),
plot.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(),
#    axis.text.x = element_blank(),
#   axis.text.y = element_blank(),
#   axis.ticks = element_blank(),
legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 1, size = 10, margin = margin(t = 0, r = 10, b = 0, l = 0) ),
plot.title = element_text(size=18, hjust = .5 ) )
p
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/albequity_profile/rcode")
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/albequity_profile/data")
library(tidyverse)
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
library(tidycensus)
## ---------------------------
census_api_key("ca2c2a93e660da8b59a3a16d602a2472767dfe62")
## ---------------------------
census_api_key("ca2c2a93e660da8b59a3a16d602a2472767dfe62", install = TRUE)
## ---------------------------
census_api_key("ca2c2a93e660da8b59a3a16d602a2472767dfe62", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron"
readRenviron("~/.Renviron"
)
readRenviron("~/.Renviron"
)
# Table 1: AHDI -----------------------------------------------------------
# Life Expectancy: https://www.countyhealthrankings.org/app/virginia/2020/measure/outcomes/147/data
# Census 1 Year Population Estimates For Albemarle & the others.
#         Less than HS, At least HS,
read_excel("https://www.countyhealthrankings.org/sites/default/files/media/document/2020%20County%20Health%20Rankings%20Virginia%20Data%20-%20v1_0.xlsx")
read_excel("https://www.countyhealthrankings.org/sites/default/files/media/document/2020%20County%20Health%20Rankings%20Virginia%20Data%20-%20v1_0.xlsx")
# Table 1: AHDI -----------------------------------------------------------
# Life Expectancy: https://www.countyhealthrankings.org/app/virginia/2020/measure/outcomes/147/data
# Census 1 Year Population Estimates For Albemarle & the others.
#         Less than HS, At least HS,
url <- "https://www.countyhealthrankings.org/sites/default/files/media/document/2020%20County%20Health%20Rankings%20Virginia%20Data%20-%20v1_0.xlsx"
excel_start_rows
excel_colnames
file_sheets_rows
excel_colnames
excel_start_rows
file_sheets_rows
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(start_col = excel_start_rows[[.x]] %>%
add_column(col_names = excel_colnames[[.x]])
)
)
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(start_col = excel_start_rows[[.x]]
) %>%
add_column(col_names = excel_colnames[[.x]])
)
file_sheets_rows
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(start_col = excel_start_rows[[.x]]
) %>%
add_column(col_names = excel_colnames[[.x]]) %>%
unnest(col_names)
)
file_sheets_rows[[1]]
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(start_row = excel_start_rows[[.x]]
) %>%
mutate(sheet_num = 1:n()) %>%
add_column(col_names = excel_colnames[[.x]]) %>%
unnest(col_names) %>%
group_by(sheet_num) %>%
mutate(col_num = 1:n())
)
file_sheets_rows[[1]]
file_sheets_rows[[7]]
file_sheets_rows <- map(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(start_row = excel_start_rows[[.x]]
) %>%
mutate(sheet_num = 1:n()) %>%
add_column(col_names = excel_colnames[[.x]]) %>%
unnest(col_names) %>%
group_by(sheet_num) %>%
mutate(col_num = 1:n()) %>%
mutate(Year = str_sub(file, 3, 6))
)
file_sheets_rows[[7]]
file_sheets_rows[[6]]
file_sheets_rows <- map_df(1:length(file_sheets),
~ file_sheets[[.x]] %>%
add_column(start_row = excel_start_rows[[.x]]
) %>%
mutate(sheet_num = 1:n()) %>%
add_column(col_names = excel_colnames[[.x]]) %>%
unnest(col_names) %>%
group_by(sheet_num) %>%
mutate(col_num = 1:n()) %>%
mutate(Year = str_sub(file, 3, 6))
)
file_sheets_rows
setwd("~/Box Sync/UVA-NASTAD Data Folder")
write_csv(file_sheets_rows, path = "rowcolumns.csv")
## ---------------------------
census_api_key("ca2c2a93e660da8b59a3a16d602a2472767dfe62", install = TRUE, overwrite = TRUE)
url <- "https://www.countyhealthrankings.org/sites/default/files/media/document/2020%20County%20Health%20Rankings%20Virginia%20Data%20-%20v1_0.xlsx"
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/albequity_profile/data")
url <- "https://www.countyhealthrankings.org/sites/default/files/media/document/2020%20County%20Health%20Rankings%20Virginia%20Data%20-%20v1_0.xlsx"
destfile <- "health_rankings.xlsx"
download.file(url, destfile)
read_excel("health_rankings.xlsx")
life_expectancy <- read_excel("health_rankings.xlsx", sheet = 5, start_row = 2)
?read_excel
life_expectancy <- read_excel("health_rankings.xlsx", sheet = 5, skip = 1)
life_expectancy
life_expectancy <- read_excel("health_rankings.xlsx", sheet = 5, skip = 1) %>%
select(contains("Life Expectancy"))
life_expectancy
life_expectancy <- read_excel("health_rankings.xlsx", sheet = 5, skip = 1)
life_expectancy %>%
select(contains("Life Expectancy"))
life_expectancy %>%
select(FIPS, State, County, contains("Life Expectancy"))
life_expectancy %>%
rename_with(~tolower(str_replace_all(.x, ".", ""))) %>%
select(FIPS, State, County, contains("Life Expectancy"))
life_expectancy %>%
select(FIPS, State, County, contains("Life Expectancy")) %>%
rename_with(~tolower(str_replace_all(.x, ".", "")))
life_expectancy %>%
select(FIPS, State, County, contains("Life Expectancy")) %>%
rename_with(everything(), ~tolower(str_replace_all(.x, ".", "")))
?rename_with
life_expectancy %>%
select(FIPS, State, County, contains("Life Expectancy")) %>%
rename_with( ~tolower(str_replace_all(.x, ".", "")), .cols = everything())
life_expectancy <- read_excel("health_rankings.xlsx", sheet = 5, skip = 1)
