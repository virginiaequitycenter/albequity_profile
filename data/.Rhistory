picon
dev.off()
# AHDI Table  --------------------------------------------------------------
library(reactable)
ahdi_table <- read_csv("ahdi_table.csv") %>%
mutate(
county = case_when(county == "total" ~ "Virginia",
TRUE ~ county
))
hlth_cols <- "life_exp"
ed_cols <- c("hs_grad", "bac_deg", "grad_deg", "school_enroll")
inc_cols <- "pers_earn"
ahdi_sub <- ahdi_table[, c("county", "ahdi", hlth_cols, ed_cols, inc_cols)]
ahdi_sub <- ahdi_sub %>% mutate(county = recode(county,
"Charlottesville City" = "Charlottesville"))
ahdi_pal <- function(x) rgb(colorRamp(c("#e5f5e0", "#238b45"))(x), maxColorValue = 255) # colorbrewer Greens 2/7
hlth_pal <- function(x) rgb(colorRamp(c("#fff5f0", "#fc9272"))(x), maxColorValue = 255) # colorbrewer Reds 1/4
educ_pal <- function(x) rgb(colorRamp(c("#deebf7", "#2171b5"))(x), maxColorValue = 255) # colorbrewer Blues 2/7
earn_pal <- function(x) rgb(colorRamp(c("#efedf5", "#6a51a3"))(x), maxColorValue = 255) # colorbrewer Blues 2/7
reactable(ahdi_sub,
columns = list(
county = colDef(name = ""),
ahdi = colDef(name = "American HDI", align = "center",
style = function(value) {
normalized <- (value - min(ahdi_sub$ahdi)) / (max(ahdi_sub$ahdi) - min(ahdi_sub$ahdi))
color <- ahdi_pal(normalized)
list(background = color)
},
format = colFormat(digits = 2)),
life_exp = colDef(name = "Life Expectancy at Birth", align = "center",
style = function(value) {
normalized <- (value - min(ahdi_sub$life_exp)) / (max(ahdi_sub$life_exp) - min(ahdi_sub$life_exp))
color <- hlth_pal(normalized)
list(background = color)
},
format = colFormat(digits = 1)),
hs_grad = colDef(name = "HS Degree or more (Adults 25+)", align = "center",
style = function(value) {
normalized <- (value - min(ahdi_sub$hs_grad)) / (max(ahdi_sub$hs_grad) - min(ahdi_sub$hs_grad))
color <- educ_pal(normalized)
list(background = color)
},
format = colFormat(digits = 1, suffix = "%")),
bac_deg = colDef(name = "Bachelors Degree or more (Adults 25+)", align = "center",
style = function(value) {
normalized <- (value - min(ahdi_sub$bac_deg)) / (max(ahdi_sub$bac_deg) - min(ahdi_sub$bac_deg))
color <- educ_pal(normalized)
list(background = color)
},
format = colFormat(digits = 1, suffix = "%")),
grad_deg = colDef(name = "Grad/ Professional Degree (Adults 25+)", align = "center",
style = function(value) {
normalized <- (value - min(ahdi_sub$grad_deg)) / (max(ahdi_sub$grad_deg) - min(ahdi_sub$grad_deg))
color <- educ_pal(normalized)
list(background = color)
},
format = colFormat(digits = 1, suffix = "%")),
school_enroll = colDef(name = "School Enrollment (Ages 3-24)", align = "center",
style = function(value) {
normalized <- (value - min(ahdi_sub$school_enroll)) / (max(ahdi_sub$school_enroll) - min(ahdi_sub$school_enroll))
color <- educ_pal(normalized)
list(background = color)
},
format = colFormat(digits = 1, suffix = "%")),
pers_earn = colDef(name = "Median Personal Earnings (Ages 16+ FT)", align = "center",
style = function(value) {
normalized <- (value - min(ahdi_sub$pers_earn)) / (max(ahdi_sub$pers_earn) - min(ahdi_sub$pers_earn))
color <- earn_pal(normalized)
list(background = color)
},
format = colFormat(digits = 0, separators = TRUE, prefix = "$"))
),
columnGroups = list(
colGroup(name = "Health", columns = hlth_cols),
colGroup(name = "Access to Knowledge", columns = ed_cols),
colGroup(name = "Living Standards", columns = inc_cols)
)
)
ed_dist <- read_csv("education_distrbution.csv")
proper=function(s) gsub("(?<=\\b)([a-z])", "\\U\\1", tolower(s), perl=TRUE)
unique(ed_dist$degree)
unique(ed_dist$Race)
ed_dist <-read_csv("education_distrbution.csv") %>%
mutate(Race = proper(Race)) %>%
mutate(
degree = factor(degree,
levels = rev(c(
"Less than high school diploma",
"High school graduate",
"Some college or associate's degree",
"Bachelor's degree or higher"
))
),
Race = factor(
Race,
levels = rev(c("All",
"White Alone",
"Black Or African American Alone",
"Asian Alone",
"Native Hawaiian And Other Pacific Islander Alone",
"American Indian And Alaska Native Alone",
"Two Or More Races",
"Some Other Race Alone",
"Hispanic Or Latino"
#  "White Alone, Not Hispanic Or Latino"
))
)
) %>%
filter(!is.na(Race))
ed_graph <-
ed_dist %>%
ungroup() %>%
group_by(Sex, Race) %>%
arrange(Sex, Race, desc(degree)) %>%
mutate(
end_pct = cumsum(percent),
start_pct = cumsum(percent) - percent,
bac_pct = case_when(
degree == "Some college or associate's degree" ~ end_pct,
TRUE ~ 0
),
bac_pct = sum(bac_pct),
start_line = start_pct - bac_pct,
end_line = start_line + percent,
height = (start_line + end_line) / 2,
display =
case_when(
percent > 10 ~ paste0(round(percent), "%"),
TRUE ~ ""
)
) %>%
filter(Sex == "All")
ed_graph <-
ed_dist %>%
ungroup() %>%
group_by(Sex, Race) %>%
arrange(Sex, Race, desc(degree)) %>%
mutate(
end_pct = cumsum(percent),
start_pct = cumsum(percent) - percent,
bac_pct = case_when(
degree == "Some college or associate's degree" ~ end_pct,
TRUE ~ 0
),
bac_pct = sum(bac_pct),
start_line = start_pct - bac_pct,
end_line = start_line + percent,
height = (start_line + end_line) / 2,
display =
case_when(
percent > 10 ~ paste0(round(percent), "%"),
TRUE ~ ""
)
) #%>%
ed_race_pal <- rev(brewer.pal(5, "BuPu"))[-5]
ed_race <-
ggplot(ed_graph, aes(y = Race))  +
geom_segment(aes(x = start_line, xend = end_line, color = degree, yend = Race ),
size = 14, alpha= .7) +
scale_color_manual(values = ed_race_pal,
name = element_blank(),
guide = guide_legend(reverse = TRUE, nrow = 1)) +
new_scale_color() +
geom_text(
aes(x = height, label = display, y = Race, color = degree),  alpha = 1, hjust =   .5, size = 2.75
) +
scale_color_manual(values = c("White",  "Black", "Black", "Black"),
guide = "none") +
geom_segment(aes(x = start_line - .3, xend = start_line, yend = Race ), color = "white",
size = 14, alpha= 1)  +
geom_vline(xintercept = 0) +
coord_cartesian(clip = 'off') +
scale_x_continuous(
labels = function(x)
paste0(abs(round(x)), "%")
) +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20)
) +
# facet_grid(~Sex, scales = "free") +
guides(
#  color = guide_legend(label.position  = "top")
) +
labs(x = "Percentage", y = "", title = "Educational Distributions by Race and Ethnicity") +
# guides(color = guide_legend(label.position = "bottom")) +
theme_classic() +
theme(panel.spacing = unit(.5, "lines"),
strip.background = element_blank(),
strip.placement = "outside",
strip.text.y = element_text(face = "bold"),
strip.text.x = element_text(face = "bold"),
#   axis.text.x = element_blank(),
#  axis.ticks.x = element_blank(),
#  axis.text.y=element_text(face= c("plain", "plain", "plain", "plain", "plain", "plain", "bold")),
legend.position = "bottom",
plot.title = element_text(hjust = .5, face = "bold")
)
ed_race <-
ggplot(ed_graph, aes(y = Race))  +
geom_segment(aes(x = start_line, xend = end_line, color = degree, yend = Race ),
size = 14, alpha= .7) +
scale_color_manual(values = ed_race_pal,
name = element_blank(),
guide = guide_legend(reverse = TRUE, nrow = 1)) +
new_scale_color() +
geom_text(
aes(x = height, label = display, y = Race, color = degree),  alpha = 1, hjust =   .5, size = 2.75
) +
scale_color_manual(values = c("White",  "Black", "Black", "Black"),
guide = "none") +
geom_segment(aes(x = start_line - .3, xend = start_line, yend = Race ), color = "white",
size = 14, alpha= 1)  +
geom_vline(xintercept = 0) +
coord_cartesian(clip = 'off') +
scale_x_continuous(
labels = function(x)
paste0(abs(round(x)), "%")
) +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20)
) +
facet_grid(~Sex, scales = "free") +
guides(
#  color = guide_legend(label.position  = "top")
) +
labs(x = "Percentage", y = "", title = "Educational Distributions by Race and Ethnicity") +
# guides(color = guide_legend(label.position = "bottom")) +
theme_classic() +
theme(panel.spacing = unit(.5, "lines"),
strip.background = element_blank(),
strip.placement = "outside",
strip.text.y = element_text(face = "bold"),
strip.text.x = element_text(face = "bold"),
#   axis.text.x = element_blank(),
#  axis.ticks.x = element_blank(),
#  axis.text.y=element_text(face= c("plain", "plain", "plain", "plain", "plain", "plain", "bold")),
legend.position = "bottom",
plot.title = element_text(hjust = .5, face = "bold")
)
jpeg(filename = "../graphs/ed_race.jpg", height = 30*72, width = 45*72, units = 'px', res = 300)
ed_race
dev.off()
ed_race
jpeg(filename = "../graphs/ed_race.jpg", height = 30*72, width = 55*72, units = 'px', res = 300)
ed_race
dev.off()
house_cost <- read_csv("housing_costs.csv")
house_cost_burden <-
house_cost %>%
# select(-denom) %>%
gather(burden, pct,-geoid, -county_type, -denom) %>%
mutate(burden = factor(burden, levels = c(
"Not Burdened",
"Burdened",
"Severely Burdened"
))) %>%
ungroup() %>%
group_by(geoid) %>%
arrange(geoid, burden) %>%
mutate(
end_pct = cumsum(pct),
start_pct = cumsum(pct) - pct,
burden_pct = case_when(
burden == "Not Burdened" ~ end_pct,
TRUE ~ 0
)
) %>%
mutate(
burden_pct = sum(burden_pct),
start_line = start_pct - burden_pct,
end_line = start_line + pct,
height = (start_line + end_line) / 2,
display =
case_when(
pct > .05 ~ paste0(round(pct*100), "%"),
TRUE ~ ""
)
)  %>%
left_join(tract_names %>%
mutate(geoid = as.character(geoid)) %>%
bind_rows(
tibble(geoid = "total", keypoints = "Albemarle County")
)
) %>%
filter(!grepl("UVA", keypoints)) %>%
mutate(county_type = factor(county_type, levels = c("County", "Census Tracts"))
) %>%
group_by(geoid) %>%
mutate(end_line_order = max(end_line)) %>%
ungroup()
house_cost_burden
house_cost <- read_csv("housing_costs.csv")
house_cost_burden <-
house_cost %>%
# select(-denom) %>%
gather(burden, pct,-geoid, -county_type, -denom) %>%
mutate(burden = factor(burden, levels = c(
"Not Burdened",
"Burdened",
"Severely Burdened"
))) %>%
ungroup() %>%
group_by(geoid) %>%
arrange(geoid, burden) %>%
mutate(
end_pct = cumsum(pct),
start_pct = cumsum(pct) - pct,
burden_pct = case_when(
burden == "Not Burdened" ~ end_pct,
TRUE ~ 0
)
) %>%
mutate(
burden_pct = sum(burden_pct),
start_line = start_pct - burden_pct,
end_line = start_line + pct,
height = (start_line + end_line) / 2,
display =
case_when(
pct > .05 ~ paste0(round(pct*100), "%"),
TRUE ~ ""
)
)  %>%
left_join(tract_names %>%
mutate(geoid = as.character(geoid)) %>%
bind_rows(
tibble(geoid = "total", keypoints = "Albemarle County")
)
) %>%
filter(!grepl("UVA", keypoints)) %>%
mutate(county_type = factor(county_type, levels = c("County", "Census Tracts"))
) %>%
group_by(geoid) %>%
mutate(end_line_order = max(end_line)) %>%
ungroup()
tract_names <- read_csv("tract_names.csv") %>%
select(-contains("X"))
tract_names
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/albequity_profile/data")
tract_names <- read_csv("tract_names.csv") %>%
select(-contains("X"))
select <- dplyr::select
tract_names <- read_csv("tract_names.csv") %>%
select(-contains("X"))
tract_names
house_cost <- read_csv("housing_costs.csv")
house_cost_burden <-
house_cost %>%
# select(-denom) %>%
gather(burden, pct,-geoid, -county_type, -denom) %>%
mutate(burden = factor(burden, levels = c(
"Not Burdened",
"Burdened",
"Severely Burdened"
))) %>%
ungroup() %>%
group_by(geoid) %>%
arrange(geoid, burden) %>%
mutate(
end_pct = cumsum(pct),
start_pct = cumsum(pct) - pct,
burden_pct = case_when(
burden == "Not Burdened" ~ end_pct,
TRUE ~ 0
)
) %>%
mutate(
burden_pct = sum(burden_pct),
start_line = start_pct - burden_pct,
end_line = start_line + pct,
height = (start_line + end_line) / 2,
display =
case_when(
pct > .05 ~ paste0(round(pct*100), "%"),
TRUE ~ ""
)
)  %>%
left_join(tract_names %>%
mutate(geoid = as.character(geoid)) %>%
bind_rows(
tibble(geoid = "total", keypoints = "Albemarle County")
)
) %>%
filter(!grepl("UVA", keypoints)) %>%
mutate(county_type = factor(county_type, levels = c("County", "Census Tracts"))
) %>%
group_by(geoid) %>%
mutate(end_line_order = max(end_line)) %>%
ungroup()
house_cost_burden
p <-
ggplot(house_cost_burden, aes(y = reorder(keypoints, end_line_order )  ))  +
geom_segment(aes(x = start_line, xend = end_line, color = burden, yend = keypoints ),
size = 10, alpha= .8) +
scale_color_manual(values = house_pal,
name = element_blank(),
guide = guide_legend(reverse = FALSE, nrow = 1)) +
new_scale_color() +
geom_text(
aes(x = height, label = display, y = keypoints, color = burden),  alpha = 1, hjust =   .5, size = 2.75
) +
scale_color_manual(values = c("Black",  "Black", "White"),
guide = "none") +
geom_text(data = house_cost_burden %>%
filter(end_pct == 1),
aes(x = end_line + .02,
#  x = -1.05,
y = keypoints,
label = paste0("Among ", denom,"\nRenting Households")),
hjust = 0,
size = 2.5,
inherit.aes = FALSE
) +
geom_segment(aes(x = start_line - .002, xend = start_line, yend = keypoints ), color = "white",
size = 11, alpha= 1)  +
geom_vline(xintercept = 0) +
coord_cartesian(clip = 'off') +
scale_x_continuous(
labels = function(x)
paste0(abs(round(x*100)), "%"),
limits = c(-1, .75),
breaks = seq(-1, .8, .25)
) +
scale_y_discrete(labels = function(x) str_wrap(x, width = 20)
) +
facet_grid(county_type ~ . ,  switch = "y", scales = "free",  space = "free_y") +
labs(x = "Percentage of Renting Households", y = "", title = "Rent Burdened Population by Census Tract") +
# guides(color = guide_legend(label.position = "bottom")) +
theme_classic() +
theme(panel.spacing = unit(.5, "lines"),
strip.background = element_blank(),
strip.placement = "outside",
strip.text.y = element_text(face = "bold"),
strip.text.x = element_text(face = "bold"),
#   axis.text.x = element_blank(),
#  axis.ticks.x = element_blank(),
#  axis.text.y=element_text(face= c("plain", "plain", "plain", "plain", "plain", "plain", "bold")),
panel.grid.major.y = element_line(linetype = "dashed", size = .2),
legend.position = "bottom",
plot.title = element_text(hjust = .5, face = "bold"),
plot.margin = margin(l = .5, r = 1, t = 1, b =1, "cm")
)
p
jpeg(filename = "../graphs/housing_costs.jpg", height = 41*72, width = 46*72, units = 'px', res = 300)
p
dev.off()
house_cost
county_housing_cost <- get_acs(geography = "county",
table = "B25070",
state = "VA",
county = "003",
survey = "acs1",
year = 2019,
cache_table = TRUE)
setwd("/Volumes/GoogleDrive/My Drive/Equity Center/Github/albequity_profile/data")
library(tidyverse)
library(readxl)
library(tidycensus)
options(scipen = 6, digits = 4) # I prefer to view outputs in non-scientific notation
select <- dplyr::select
county_housing_cost <- get_acs(geography = "county",
table = "B25070",
state = "VA",
county = "003",
survey = "acs1",
year = 2019,
cache_table = TRUE)
tract_housing_cost <- get_acs(geography = "tract",
table = "B25070",
state = "VA",
county = "003",
survey = "acs5",
year = 2019,
cache_table = TRUE)
county_housing_cost
# County level stats.
county_housing <-
county_housing_cost %>%
left_join(acs1 %>% rename(variable = name))# %>%
acs1 <- load_variables(2019, "acs1", cache = TRUE)
acs5 <- load_variables(2019, "acs5", cache = TRUE)
acs1_2019 <- load_variables(2019, "acs1/subject", cache = TRUE)
acs1_2019_prof <- load_variables(2019, "acs1/profile", cache = TRUE)
# County level stats.
county_housing <-
county_housing_cost %>%
left_join(acs1 %>% rename(variable = name)) #%>%
county_housing
# County level stats.
county_housing <-
county_housing_cost %>%
left_join(acs1 %>% rename(variable = name)) %>%
separate(label, c(NA, "Total", "level"), sep = "!!")  %>%
mutate(level = case_when(is.na(level) ~ "Total",
TRUE ~ level)) %>%
select(estimate, level, GEOID)  %>%
spread(level, estimate) %>%
rename_with( ~ str_replace_all(
tolower(
str_replace_all(.x, " ", "_")
),
"_percent",
"")
) #%>%
county_housing
# County level stats.
county_housing <-
county_housing_cost %>%
left_join(acs1 %>% rename(variable = name)) %>%
separate(label, c(NA, "Total", "level"), sep = "!!")  %>%
mutate(level = case_when(is.na(level) ~ "Total",
TRUE ~ level)) #%>%
county_housing
View(county_housing)
